//#Home work
#include <GL/glut.h> 
#include <math.h> 
 
GLfloat angle = -90; 
GLfloat tx = cos(angle); 
 
void init(void) 
{ 
    glClearColor(0.0, 0.0, 0.0, 0.0); 
    glShadeModel(GL_SMOOTH); 
 
    glEnable(GL_LIGHTING); 
 
    glEnable(GL_LIGHT0); 
    GLfloat light_position1[] = { 1.0, 1.0, 1.0, 0.0 }; 
    GLfloat light_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; 
    GLfloat light_diffuse[] = { 0.0, 1.0, 0.0, 0.0 }; 
    GLfloat light_specular[] = { 0.0, 1.0, 0.0, 1.0 }; 
 
    glLightfv(GL_LIGHT0, GL_POSITION, light_position1); 
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient); 
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse); 
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular); 
 
    GLfloat mat_ambient[] = { 0.4, 0.4, 0.4, 1.0 }; 
    GLfloat mat_diffuse[] = { 1.0, 0.0, 0.0, 1.0 }; 
    GLfloat mat_specular[] = { 1.0, 0.0, 0.0, 1.0 }; 
    GLfloat mat_shininess[] = { 100.0 }; 
    GLfloat light_position[] = { tx, 1.0, 1.0, 0.0 }; 
    glLightfv(GL_LIGHT1, GL_POSITION, light_position); 
    glLightfv(GL_LIGHT1, GL_AMBIENT, mat_ambient); 
    glLightfv(GL_LIGHT1, GL_DIFFUSE, mat_diffuse); 
    glLightfv(GL_LIGHT1, GL_SPECULAR, mat_specular); 
    glLightfv(GL_LIGHT1, GL_SHININESS, mat_shininess); 
 
    GLfloat material_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; 
    GLfloat material_diffuse[] = { 0.8, 0.8, 0.8, 1.0 }; 
    GLfloat material_specular[] = { 1.0, 1.0, 1.0, 1.0 }; 
    GLfloat material_shininess[] = { 100.0 }; 
 
    glMaterialfv(GL_FRONT, GL_AMBIENT, material_ambient); 
    glMaterialfv(GL_FRONT, GL_DIFFUSE, material_diffuse); 
    glMaterialfv(GL_FRONT, GL_SPECULAR, material_specular); 
    glMaterialfv(GL_FRONT, GL_SHININESS, material_shininess); 
 
    glEnable(GL_DEPTH_TEST); 
} 
 
void display(void) 
{ 
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glutSolidSphere(1.0, 20, 16); 
    glFlush(); 
} 
 
void reshape(int w, int h) 
{ 
    glViewport(0, 0, (GLsizei)w, (GLsizei)h); 
    glMatrixMode(GL_PROJECTION); 
    glLoadIdentity(); 
    if (w <= h) 
        glOrtho(-1.5, 1.5, -1.5 * (GLfloat)h / (GLfloat)w, 
            1.5 * (GLfloat)h / (GLfloat)w, -10.0, 10.0); 
    else 
        glOrtho(-1.5 * (GLfloat)w / (GLfloat)h, 
            1.5 * (GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0); 
    glMatrixMode(GL_MODELVIEW); 
    glLoadIdentity(); 
} 
 
void key(unsigned char key, int x, int y) 
{ 
    if (key == '1') { 
        glEnable(GL_LIGHT1); 
        glDisable(GL_LIGHT0); 
    } 
    else if (key == '0') { 
        glEnable(GL_LIGHT0); 
        glDisable(GL_LIGHT1); 
    } 
    glutPostRedisplay(); 
} 
 
void timer(int value) 
{ 
    tx = cos(angle += 0.001); 
    GLfloat light_position[] = { tx, 1.0, 1.0, 0.0 }; 
    glLightfv(GL_LIGHT1, GL_POSITION, light_position); 
    glutPostRedisplay(); 
    glutTimerFunc(1, timer, 0); 
} 
 
int main(int argc, char** argv) 
{ 
    glutInit(&argc, argv); 
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH); 
glutInitWindowSize(500, 500); 
glutInitWindowPosition(100, 100); 
glutCreateWindow("l"); 
init(); 
glutDisplayFunc(display); 
glutReshapeFunc(reshape); 
glutKeyboardFunc(key); 
glutTimerFunc(1, timer, 0); 
glutMainLoop(); 
return 0; 
}